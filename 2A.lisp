(defun correlation(list)
  (let((newlist '()))
    (if(null list) '()
     (cond(( not(listp (car list)))
        (let((root (cdr (mapcar #'(lambda(z)(if(not(listp z)) z (car z)))list))))
	     (princ "(")
	     (princ (car list))
	     (princ " ")
	    (loop for i in root
	       do(princ i)
		 (princ " ")
		 )
	    (princ ") ")
		  )
	     (correlation(cdr list)))
	     
            (t(push (mapcar #'(lambda (z) (mapcar #'(lambda (q) (if(not(listp q)) q (car q))) z)) list) newlist)
	    
	      (loop for i in newlist
		 
		 do(loop for j in i
		   do(cond((not(eq (cadr j) nil))
			  (print j)
			  (princ " ")			  
			   ))) 
		  )
  (correlation(mapcan #'(lambda(z)(if(not(listp z)) '() (cdr z))) list)))))
    )
  )
(defun bfs(list find)
  (let((w (caar list)) (r '()) (y (car list)))
      (let((c 0) (b 0) (z 0) (qq 0))
	(let (( k 1))
	  
	     (loop for j in y
		  do(incf z)) 
 (loop for i in list
    do(if(eq k c) (return))
    do(cond((eq find w) (princ w)
			 (return)))
     do(cond((listp i)
	       (loop for j in i		 
		  do(cond((not(eq j (car i)))(princ (car i))
		        (cond((eq j find); (princ " YES ")
			 	(princ " ")
				(princ j)		       
				(setq k c)
			       (return)
				)
		 (t (princ " ")
		  (princ j)
		  (princ " "))
		 )))
		    (loop for l in list
		       do (if(eq l i) (return))
		       do(loop for d in l
			    do(cond((eq d j)
				 
				    (setq r (car l))
				    ))))
		    )
	      (cond ((not(eq (car i) (caar list))) (cond((not(eq k c))
						   (princ (car i))
							 (princ " ")
							 
	     (cond((not(null r))
		   (cond((not(eq r w))
			 (princ r)
			 (princ " ")
			 (incf b)
			 (cond((eq b (1- z))
			       (princ w)
			       (princ " ")
			        (princ (car y))
							 (princ " ")
							 (setq y (cdr y))
			       (setq b 0))))
			(t(princ r)
			  (princ " ")
			  (incf qq)
			  (cond((not(eq (car y) w))(princ (car y))
							 (princ " ")
				(setq y (cdr y)))
			       (t (if(eq qq (- z 2)) (setq y (cdr y)))))
			  )))
		  (t(princ w)
	      (princ " "))
		  )       
							  )
							(t
							  (return))
						        ))
		    (t(cond((eq k c) (return))
			   (t(princ w)
		      (princ " ")
		     ))))
	     )
	      )
      )
))))
